<?xml version="1.0" encoding='UTF-8'?>
<book version="5.0" xmlns="http://docbook.org/ns/docbook"
      xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0CR7/xsd/docbook.xsd
http://docbook.org/ns/docbook ">
  <info>
    <title>Stool</title>
    <subtitle>Stage Tool</subtitle>
    <authorgroup>
      <author>
        <personname>Michael Hartmeier</personname>
        <email>michael.hartmeier@1und1.de</email>
      </author>
      <author>
        <personname>Maximilian Braun</personname>
        <email>maximilian.braun@1und1.de</email>
      </author>
    </authorgroup>
    <copyright>
      <year>2015</year>
      <holder>1&amp;1 Internet AG</holder>
    </copyright>

    <releaseinfo>
      <remark>Stool <?eval ${project.version}?>, <xi:include href="../../../target/now.txt" parse="text"/></remark>
    </releaseinfo>
  </info>

  <chapter>
    <title>Introduction</title>

    <para>Stool is a command line tool that provides a lifecycle for stages: create, configure, build, run and remove.
      A stage contains web applications built from source or downloaded as artifacts.
      Here's an example, what you can do with Stool:
    </para>

    <para>(The following assumes that Stool has been installed properly - see the respective section below)</para>

    <para>Invoke
      <programlisting>stool</programlisting>
      to see if stool is installed. You should get a usage message with available commands.
    </para>

    <para>Create a new stage by checking out an application:

      <programlisting>stool create https://github.com/mlhartme/hellowar/trunk</programlisting>

      Build the application:

      <programlisting>stool build</programlisting>

      Start it:

      <programlisting>stool start</programlisting>

      To see the running application, point your browser to the url printed by the start command.
    </para>

    <para>You can invoke

      <programlisting>stool status</programlisting>

      to see if your application is running and to see the application urls.
    </para>

    <para>To remove the stage, stop the application with

      <programlisting>stool stop</programlisting>

      and dump it from your disk with

      <programlisting>stool remove</programlisting>
    </para>

    <para>
      You can create an arbitrary number of stages. Invoke
      <programlisting>stool list</programlisting>

      to see what you have created and not yet removed. To switch to another stage, invoke

      <programlisting>stool select otherstage</programlisting>

      You can use

      <programlisting>stool history</programlisting>

      to see what happened on the stage.
    </para>
  </chapter>

  <chapter>
    <title>Concepts</title>

    <sect1>
      <title>Properties</title>
      <para>Stool is configured via Stool properties and stage properties. Stool properties are global settings that apply to all stages;
        stage properties configure the respective stage only, every stage has its own set of stage properties.
      </para>
    </sect1>
    <sect1>
      <title>Stage</title>

      <para>A stage hosts one or more web applications. A stage has a
        <itemizedlist>
          <listitem>
            <formalpara>
              <title>directory</title>
              <para>Where the stage is stored in your file system. This is where you usually work with your stage.
                It holds the source code or the artifacts of this stage. The directory is specified when you create a
                stage. You can change the stage directory with 'stool move'.
              </para>
            </formalpara>
          </listitem>
          <listitem>
            <formalpara>
              <title>name</title>
              <para>Unique identifier for a stage. The name of the selected stage is shown in your shell prompt, you
                use it to switch between stages, and it's part of the application url(s).
                In most cases, you create a stage without specifying a name, and the name is automatically derived
                from the directory; you'll get an error message if it's not unique.
                You can change the name with 'stool rename'.
              </para>
            </formalpara>
          </listitem>
          <listitem>
            <formalpara>
              <title>url</title>
              <para>Specifies where the web applications come from: A Subversion URL or Maven Coordinates.</para>
              <programlisting>Examples
                https://github.com/mlhartme/hellowar/trunk
                gav:net.oneandone:hellowar:1.0.2
              </programlisting>
            </formalpara>
          </listitem>
          <listitem>
            <formalpara>
              <title>type</title>
              <para>How the stage contains the web application(s): source - checkout of a Maven project, or artifact - a Maven artifact.</para>
            </formalpara>
          </listitem>
          <listitem>
            <formalpara>
              <title>state</title>
              <para>one of
                <itemizedlist>
                  <listitem>
                    down: initial state or after stage was stopped
                  </listitem>
                  <listitem>
                    up: state after successful start or restart
                  </listitem>
                  <listitem>
                    sleeping: state after stage was stopped with '-sleep'
                  </listitem>
                </itemizedlist>
              </para>
            </formalpara>
          </listitem>
          <listitem>
            <formalpara>
              <title>owner</title>
              <para>see below</para>
            </formalpara>
          </listitem>
        </itemizedlist>
      </para>
    </sect1>

    <sect1>
      <title>Selected stage and stage indicator</title>

      <para>Usually you have one stage you're working with: the selected stage, which is shown in the stage
        indicator in your prompt:<programlisting>{somestage}</programlisting>. After creating a stage, it
        automatically becomes the selected stage, subsequent Stool commands work with this stage. If you want wo work
        with a different stage, you use 'stool select' to switch to it. When you remove the current stage,
        you no longer have a selected stage and the stage indicator vanishes.
      </para>

      <para>The stage indicator is red when you're not the owner of the selected stage. It is blue, when the
        selected stage is broken or no longer exists. The stage indicator is invisible if you have no stage selected;
        select a stage to get the stage indicator.
      </para>
    </sect1>

    <sect1>
      <title>Stage commands</title>

      <para>Most Stool commands are stage commands, i.e. they operate on (an arbitrary number of) stages. Typical
        stage commands are 'status', 'build', 'start', and 'stop'. Note that 'create' is not a stage command because
        it does not initially have a stage to operate on (although it results in a new (and selected) stage).
      </para>

      <para>By default, stage commands operate on the selected stage. You can change this by specifying one of the
        selection options '-all' or '-stage &lt;expr>'. E.g. 'stool status -stage owner=mhm' prints the status of all
        stages owned by user 'mhm'. Or you can print the configuration of stage 'foo' with 'stool config -stage foo'
        without changing the selected stage.
      </para>

      <para>Stage commands have a failure mode, configurable with '-fail &lt;mode>', to specify how to deal with
        broken stages and failed stage commands. Mode 'normal' reports problems as soon as they are detected; this is
        the default. 'after' reports problems after the actual command was invoked on all selected stages.
        And finally 'never' is similar to 'after', but reports warnings instead of errors (and thus, stool always returns
        with error code 0).
      </para>
    </sect1>

    <sect1>
      <title>Stage owner</title>

      <para>Stool can run in shared mode to comply with company security rules. If you run Stool on your own machine
        and you are the only user, you'll set 'shared' to false - you can skip the rest of this section. On this other
        hand, if Stool is used by multiple users, you'll used shared mode as described below.
      </para>

      <para>If you create a new stage, you become the owner of this stage. You own the files in the stage directory
        in terms of Unix file ownership, and you have write access to stage files. Other users have read access to the
        files. Note that everybody (with the appropriate svn permissions) can change files in Subversion, but only the
        stage owner can run 'svn up' on his stage. Note also, that everybody can change files via Pustefix Editor (with
        the appropriate editor permissions), they appear as modified by the stage owner), but only the stage owner can
        commit the modifications.
      </para>

      <para>Starting a stage starts a Tomcat process owned by the stage owner, no matter who
        actually issued the start command. Thus, any user can start and stop a stage, not only the owner.
      </para>

      <para>If a different user has to make changes to stage files, he/she has to use the 'chown' command to become
        owner of the stage and thus get the necessary permissions to change files.
      </para>

      <para>Example: If user 'mhm' owns stage 'tec1584', and user 'bitterichc' wants to change a file in the stage
        directory, one of them has to run 'stool chown -stage tec1584 bitterichc'. This will stop any stage processes
        (which is allowed for bitterichc as well!), change Unix file ownership of the stage files to 'bitterichc' and
        re-start the stage processes to also change process ownership to the new owner..
      </para>

      <para>Rationale:
        <itemizedlist>
          <listitem>Tool users like 'servlet' or 'stage5' have to be replaced by personalized logins (security guideline).</listitem>
          <listitem>We need to know exactly who changed a stage file (security guideline).</listitem>
          <listitem>It's difficult and fragile to grant multiple users write access to stage files (e.g. via umask configuration),
            in particular because the respective user's home directories have to be private.
          </listitem>
        </itemizedlist>
        Ownership is meant to track changes, not to prevent them.
      </para>

      <para>Implementation note: The chown command internally uses sudo to elevate the current user's permissions to
        start/stop processes or change file ownership. Note that some files have to be group-writable, because arbitrary
        users have to create them: the global lock and things generated by stool start). All users of stool have to be
        in the same group.
      </para>
    </sect1>

    <sect1>
      <title>Stage wrapper</title>
      <para>Every stage directory as an associated wrapper - a directory that stores Stool-related data about the stage,
        e.g. the stage properties, Tomcat configuration and log files. The wrapper is created when you create or import the
        stage. Wrapper directories are created in '$STOOL_HOME/wrappers' and have the name of the stage; Stool uses this
        directory to iterate all stages.
      </para>
      <para>Stool removes wrappers either explicitly when you invoke the 'remove' command, or implicitly when it detects
        a stale wrapper. A wrapper is stale if its corresponding stage directory has been deleted (usually by a user
        running 'rm -rf' on it. Stool checks for - and cleans - stale wrappers before every command. Cleaning a stale
        wrapper deletes (kill -9) all processes that have a pid file in the wrapper directory and deletes the wrapper
        itself.
      </para>
    </sect1>

    <sect1>
      <title>Stage expiring</title>
      <para>Every stage has an 'until' property that specifies how long the stage is needed. You can see the until date
        with 'stool config until'. If this date has passed, the stage is called expired, it is automatically stopped, the
        owner gets an email notification and you cannot start it unless you specify a new date with 'stool config until=yyyy-mm-dd'.
        Depending on Stool's autoRemove configuration, the stage will automatically be removed after the configured number of days.
        This mechanism helps to detect and remove unused stages, which is crucial for shared machines. If you receive an email
        notification that your stage has expired, please check if your stage is still needed. If so, adjust the
        until data, otherwise remove the stage.
      </para>
    </sect1>

  </chapter>

  <chapter>
    <title>Commands</title>

    <sect1>
      <title>Stool</title>
      <refentry>
        <refmeta>
          <refentrytitle>stool</refentrytitle>
          <manvolnum>1</manvolnum>
        </refmeta>

        <refnamediv>
          <refname>stool</refname>
          <refpurpose>stool cli</refpurpose>
        </refnamediv>

        <refsynopsisdiv>
          <cmdsynopsis>
            <command>stool</command>
          </cmdsynopsis>
        </refsynopsisdiv>

        <refsect1><title>Description</title>
          <para>
          </para>
        </refsect1>

      </refentry>

    </sect1>

    <sect1>
      <title>System commands</title>

      <para>Commands that do not deal with individual stages.</para>

      <sect2>
        <title>System Start</title>
        <refentry>
          <refmeta>
            <refentrytitle>stool-system-start</refentrytitle>
            <manvolnum>1</manvolnum>
          </refmeta>

          <refnamediv>
            <refname>stool-system-start</refname>
            <refpurpose>startup stages</refpurpose>
          </refnamediv>

          <refsynopsisdiv>
            <cmdsynopsis>
              <command>stool system-start</command>
            </cmdsynopsis>
          </refsynopsisdiv>

          <refsect1><title>Description</title>
            <para>
              Starts the stage overview and all sleeping stages.
            </para>
          </refsect1>

        </refentry>
      </sect2>

      <sect2>
        <title>System Stop</title>
        <refentry>
          <refmeta>
            <refentrytitle>stool-system-stop</refentrytitle>
            <manvolnum>1</manvolnum>
          </refmeta>

          <refnamediv>
            <refname>stool-system-stop</refname>
            <refpurpose>shutdown stages</refpurpose>
          </refnamediv>

          <refsynopsisdiv>
            <cmdsynopsis>
              <command>stool system-stop</command>
            </cmdsynopsis>
          </refsynopsisdiv>

          <refsect1><title>Description</title>
            <para>
              Stops the overview stage and sends all running stages to sleep.
            </para>
          </refsect1>
        </refentry>
      </sect2>

      <sect2>
        <title>System Validate</title>
        <refentry>
          <refmeta>
            <refentrytitle>stool-system-validate</refentrytitle>
            <manvolnum>1</manvolnum>
          </refmeta>
          <refnamediv>
            <refname>stool-system-validate</refname>
            <refpurpose>check system configuration</refpurpose>
          </refnamediv>

          <refsynopsisdiv>
            <cmdsynopsis>
              <command>stool system-validate</command>
            </cmdsynopsis>
          </refsynopsisdiv>
          <refsect1><title>Description</title>
            <para>
              Checks DNS settings.
            </para>
          </refsect1>
        </refentry>
      </sect2>
      <sect2>
        <title>System Import</title>
        <refentry>
          <refmeta>
            <refentrytitle>stool-system-import</refentrytitle>
            <manvolnum>1</manvolnum>
          </refmeta>
          <refnamediv>
            <refname>stool-system-import</refname>
            <refpurpose>import from another stool installation</refpurpose>
          </refnamediv>

          <refsynopsisdiv>
            <cmdsynopsis>
              <command>stool system-import</command>
              <arg>-include <group><arg choice="plain">all</arg><arg choice="plain">config</arg><arg choice="plain">stages</arg></group></arg>
              <arg choice="plain"><replaceable>other-home</replaceable></arg>
              <group rep="repeat"><arg choice="plain"><replaceable>name</replaceable></arg><arg choice="plain"><replaceable>key=value</replaceable></arg></group>
            </cmdsynopsis>
          </refsynopsisdiv>
          <refsect1><title>Description</title>
            <para>Imports configuration and/or stages from a the specified directory.</para>
          </refsect1>
        </refentry>
      </sect2>
    </sect1>
    <sect1>
      <title>Create</title>
      <refentry>
        <refmeta>
          <refentrytitle>stool-create</refentrytitle>
          <manvolnum>1</manvolnum>
        </refmeta>
        <refnamediv>
          <refname>stool-create</refname>
          <refpurpose>creates a new stage</refpurpose>
        </refnamediv>
        <refsynopsisdiv>
          <cmdsynopsis>
            <command>stool create</command>
            <group>
              <arg>-quiet</arg>
              <arg>-name <replaceable>str</replaceable></arg>
            </group>
            <arg choice="plain"><replaceable>url</replaceable></arg>
            <arg><replaceable>directory</replaceable></arg>
            <arg rep="repeat"><replaceable>key=value</replaceable></arg>
          </cmdsynopsis>
        </refsynopsisdiv>
        <refsect1><title>Description</title>
          <para>Creates a new stage directory and wrapper directory, enters the stage directory and selects the stage.
            In most cases, you invoke 'stool create' similar to 'svn checkout': with an url and a directory.
          </para>
          <para>&lt;url> specifies the application you want to run in your stage. In many cases, the url is a subversion url and
            Stool performs a checkout. Output of the checkout command is printed to the console unless the quiet option is specified.
          </para>
          <para>&lt;directory> specifies the stage directory to holding your application. If not specified, the current directory with the last
            usable segment of the url (i.e. the last segment that is not trunk, tags, or branches) is used. You can specify an arbitrary directory,
            as long as it does not exist yet and the parent directory exists and is writable for all users of the current group. Otherwise,
            create reports an error.
          </para>
          <para>The new stage is configured with default stage properties. You can specify key-value pairs to override the
            defaults, or you can change the configuration later with 'stool config'.
          </para>
          <para>Unless specified with the '-name' option, the stage name is the directory name.</para>
          <para>Instead of a &lt;url,&gt; you can specify '% &lt;searchstring&gt;'. This will search Pommes for the specified
            search string, show all corresponding svn urls (including branches), and ask you to select one.
          </para>
          <para>Create reports an error if the available free disk space is low (the threshold is specified in the Stool
            configuration.</para>
        </refsect1>
      </refentry>
    </sect1>

    <sect1>
      <title>Import</title>

      <refentry>
        <refmeta>
          <refentrytitle>stool-import</refentrytitle>
          <manvolnum>1</manvolnum>
        </refmeta>
        <refnamediv>
          <refname>stool-import</refname>
          <refpurpose>creates stages for existing directories</refpurpose>
        </refnamediv>

        <refsynopsisdiv>
          <cmdsynopsis>
            <command>stool import</command>
            <arg>-max <replaceable>n</replaceable></arg>
            <arg>-name <replaceable>template</replaceable></arg>
            <arg rep="repeat"><replaceable>directory</replaceable></arg>
          </cmdsynopsis>
        </refsynopsisdiv>
        <refsect1><title>Description</title>
          <para>Scans the specified directories (recursively) for new stages and offers to import them. If the scan only
            yields a single candidate, it will be imported and selected without additional interaction. Importing means that
            a wrapper directory for the stage directory is created. </para>
          <para><option>template</option> is a string, and any occurence of %d will be replaced by the current directory name. Default
            template is %d.</para>
        </refsect1>
      </refentry>
    </sect1>
    <sect1>
      <title>Build</title>

      <refentry>
        <refmeta>
          <refentrytitle>stool-build</refentrytitle>
          <manvolnum>1</manvolnum>
        </refmeta>
        <refnamediv>
          <refname>stool-build</refname>
          <refpurpose>builds a stage</refpurpose>
        </refnamediv>

        <refsynopsisdiv>
          <cmdsynopsis>
            <command>stool build</command>
          </cmdsynopsis>
        </refsynopsisdiv>
        <refsect1><title>Description</title>
          <para>Enters the stage directory and executes the build command specified in the 'build' property.</para>
          <para>You can see the configured build command with 'stool config build', and you can change it with
            'stool config "build=command to build"' (the quotes are mandatory if your command contains spaces).
          </para>

          <para><command>stool build</command> does no extra magic besides entering the stage directory. Thus, it has exactly the same effect
            if you manually enter the stage directory and invoke the build command yourself, without Stool. <command>stool build</command>
            is only for your convenience, you do not have to use it to build you project properly.
          </para>
          <para>The build command executes in the same environment (i.e. with the same environment variablens) as Stool is
            executed. If you invoke <command>build</command> from the overview application, the build command executes in the environment
            of the user who started the overview. </para>
        </refsect1>
      </refentry>
    </sect1>

    <sect1>
      <title>Remove</title>

      <refentry>
        <refmeta>
          <refentrytitle>stool-remove</refentrytitle>
          <manvolnum>1</manvolnum>
        </refmeta>
        <refnamediv>
          <refname>stool-remove</refname>
          <refpurpose>removes a stage</refpurpose>
        </refnamediv>

        <refsynopsisdiv>
          <cmdsynopsis>
            <command>stool remove</command>
            <arg>-force</arg>
            <arg>-batch</arg>
            <arg>-wrapper</arg>
          </cmdsynopsis>
        </refsynopsisdiv>
        <refsect1><title>Description</title>
          <para>Removes the stage, i.e. deletes the stage directory and the wrapper directory.</para>
          <para>Before deleting anything, this command checks if there are uncommitted changes or if the stage is started.
            If so, the command is aborted with an error. In this case, stop the stage and inspect the uncommitted changes; either
            commit them or revert them. Alternatively, you can disable this check with the -force option.
          </para>
          <para>Also, before removing anything, this command asks if you really want to remove the stage.
            You can disable this check with the '-batch' option.
          </para>
          <para>If you specify the '-wrapper' option, only the wrapper directory will be deleted. This is useful to "unimport" a stage,
            i.e. revert the effect of 'stool import'.
          </para>
        </refsect1>
      </refentry>
    </sect1>
    <sect1>
      <title>Start</title>

      <refentry>
        <refmeta>
          <refentrytitle>stool-start</refentrytitle>
          <manvolnum>1</manvolnum>
        </refmeta>
        <refnamediv>
          <refname>stool-start</refname>
          <refpurpose>starts a stage</refpurpose>
        </refnamediv>

        <refsynopsisdiv>
          <cmdsynopsis>
            <command>stool start</command>
            <group>
              <arg rep="plain">-debug</arg>
              <arg rep="plain">-suspend</arg>
            </group>
            <arg>-tail</arg>
          </cmdsynopsis>
        </refsynopsisdiv>
        <refsect1><title>Description</title>
          <para>Creates the necessary configuration and starts Tomcat. If the stage is an artifact stage,
            you can start it right away; otherwise, you have to build it first. Depending on your application,
            startup may take a while.</para>
          <para>Startup is refused if your stage has expired. In this case, use 'stool config until=newdata' to configure
            a new 'until' date.
          </para>
          <para><option>-debug</option> and <option>-suspend</option> enable the debugger. The difference is that suspend waits for the
            debugger to connect before starting any application code.</para>
          <para>Use the '-tail' option to start tomcat and get catalina.out printed to the console. Press ctrl-c to stop watching
            catalina.out, the application will continue to run. Alternatively, you can tail manually with
            'stool cd logs &amp;&amp; tail -f catalina.out'</para>
          <para>The Tomcat version is configurable with 'stool config tomcat.version=&lt;version>'. You have to restart the stage
            when you change the version. The respective Tomcat will be downloaded automatically to the directory specified by the downloadCache
            property (default is '$STOOL_HOME/downloads'). Alternatively, you can place customized Tomcats into this directory, provided they
            unpack to a directory that matches the base file name of the tar.gz file.
          </para>
          <para>Start generates a Tomcat base directory if it does not yet exist. If it exists, only the server.xml is updated by taking
            server.xml.template and adding all apps to it.
          </para>
          <para>The environment of the started application is the current environment restricted to the variables listed in the 'tomcat.env'
            property; variables listed there are passed to the application, all others are removed. If you invoke 'start' from the overview
            application, the login environment of the stage owner defines the basic environment.</para>
        </refsect1>
      </refentry>
    </sect1>

    <sect1>
      <title>Stop</title>

      <refentry>
        <refmeta>
          <refentrytitle>stool-stop</refentrytitle>
          <manvolnum>1</manvolnum>
        </refmeta>
        <refnamediv>
          <refname>stool-stop</refname>
          <refpurpose>stops a stage</refpurpose>
        </refnamediv>

        <refsynopsisdiv>
          <cmdsynopsis>
            <command>stool stop</command>
            <arg>-sleep</arg>
          </cmdsynopsis>
        </refsynopsisdiv>
        <refsect1><title>Description</title>
          <para>Stops tomcat of the respective stage. If <option>-sleep</option> is specified, the stage is also marked as sleeping.</para>
        </refsect1>
      </refentry>
    </sect1>

    <sect1>
      <title>Restart</title>

      <refentry>
        <refmeta>
          <refentrytitle>stool-restart</refentrytitle>
          <manvolnum>1</manvolnum>
        </refmeta>
        <refnamediv>
          <refname>stool-restart</refname>
          <refpurpose>restarts a stage</refpurpose>
        </refnamediv>

        <refsynopsisdiv>
          <cmdsynopsis>
            <command>stool restart</command>
            <group>
              <arg rep="plain">-debug</arg>
              <arg rep="plain">-suspend</arg>
            </group>
          </cmdsynopsis>
        </refsynopsisdiv>
        <refsect1><title>Description</title>
          <para>
            Shorthand for <command>stool stop</command> and <command>stool start</command> with the specified options.
          </para>
        </refsect1>
      </refentry>
    </sect1>
    <sect1>
      <title>Refresh</title>

      <refentry>
        <refmeta>
          <refentrytitle>stool-refresh</refentrytitle>
          <manvolnum>1</manvolnum>
        </refmeta>
        <refnamediv>
          <refname>stool-refresh</refname>
          <refpurpose>refreshes a stage</refpurpose>
        </refnamediv>

        <refsynopsisdiv>
          <cmdsynopsis>
            <command>stool refresh</command>
            <group>
              <arg rep="plain">-debug</arg>
              <arg rep="plain">-suspend</arg>
            </group>
            <arg>-build</arg>
            <arg>-stop</arg>
            <arg>-own</arg>
          </cmdsynopsis>
        </refsynopsisdiv>
        <refsect1><title>Description</title>
          <para>First stops the stage if it is started. Then chowns that stage to the current user (unless stage owner and current user
            are the same). Then updates artifact stages or - if <option>-build</option> is specified -
            invokes the command specified by the refresh property on source stages.</para>
          <para>Next, if the owner was changed, the stage is chowned back to the original ower. (Specify <option>-own</option>
          to skip this step.)</para>
          <para>And finally, if the stage was initially started starts the stage again. (Specify <option>-stop</option>
          to skip this step.)</para>
        </refsect1>
      </refentry>
    </sect1>
    <sect1>
      <title>Chown</title>

      <refentry>
        <refmeta>
          <refentrytitle>stool-chown</refentrytitle>
          <manvolnum>1</manvolnum>
        </refmeta>
        <refnamediv>
          <refname>stool-chown</refname>
          <refpurpose>changes the stage owner</refpurpose>
        </refnamediv>

        <refsynopsisdiv>
          <cmdsynopsis>
            <command>stool chown</command>
            <group>
              <arg>-stop</arg>
              <arg>-batch</arg>
              <arg><replaceable>user</replaceable></arg>
            </group>
          </cmdsynopsis>
        </refsynopsisdiv>
        <refsect1><title>Description</title>
          <para>Changes the stage owner, i.e. the owner of all files and directories in the stage directory and the wrapper directory.</para>
          <para>Before executing, chown checks if the stage has modified source files. If so, it asks for confirmation before changing ownership.
            You can skip confirmation by specifying <option>-batch</option>.</para>
          <para>Reports an error if the stage is running. In this case, you can specify <option>-stop</option> to stop the stage before
            changing ownership and also start it afterwards.</para>
          <para><option>user</option> defaults to the current user.</para>
        </refsect1>
      </refentry>

    </sect1>

    <sect1>
      <title>History</title>

      <refentry>
        <refmeta>
          <refentrytitle>stool-history</refentrytitle>
          <manvolnum>1</manvolnum>
        </refmeta>
        <refnamediv>
          <refname>stool-history</refname>
          <refpurpose>prints the command history</refpurpose>
        </refnamediv>

        <refsynopsisdiv>
          <cmdsynopsis>
            <command>stool history</command>
            <arg>-max <replaceable>n</replaceable></arg>
            <arg rep="repeat"><replaceable>detail</replaceable></arg>
          </cmdsynopsis>
        </refsynopsisdiv>
        <refsect1><title>Description</title>
          <para>Prints the command history of the stage. Speficy <option>detail</option> to the full command output for the respective
          command or range of commands. If the max number of commands is exceeded, older commands are ignores (defauls is 999). </para>
        </refsect1>
      </refentry>
    </sect1>

    <sect1>
      <title>Select</title>

      <refentry>
        <refmeta>
          <refentrytitle>stool-select</refentrytitle>
          <manvolnum>1</manvolnum>
        </refmeta>
        <refnamediv>
          <refname>stool-select</refname>
          <refpurpose>switches between stages</refpurpose>
        </refnamediv>

        <refsynopsisdiv>
          <cmdsynopsis>
            <command>stool select</command>
            <group>
              <arg rep="plain"><replaceable>stage</replaceable></arg>
              <arg rep="plain">none</arg>
            </group>
          </cmdsynopsis>
        </refsynopsisdiv>
        <refsect1><title>Description</title>
          <para>Prints the current stage when called without argument.</para>
          <para>Changes the selected stage when called with a stage name:
            <itemizedlist>
              <listitem>
                Adjusts the environment variables for the selected stage (e.g. MAVEN_OPTS, JAVA_HOME).
              </listitem>
              <listitem>
                Adjusts the selected stage indicator. If it's red, you're not the owner.
              </listitem>
              <listitem>
                Changes the current working directory to the stage directory.
              </listitem>
            </itemizedlist>
          </para>
          <para>When called with <option>none</option>: resets environment variables and removes the stage indicator.</para>
          <para>If the specified stage is not found, the command prints an error message and lists stages that
            you could have meant.
          </para>
        </refsect1>
      </refentry>
    </sect1>

    <sect1>
      <title>Cd</title>

      <refentry>
        <refmeta>
          <refentrytitle>stool-cd</refentrytitle>
          <manvolnum>1</manvolnum>
        </refmeta>
        <refnamediv>
          <refname>stool-cd</refname>
          <refpurpose>jump to directories</refpurpose>
        </refnamediv>

        <refsynopsisdiv>
          <cmdsynopsis>
            <command>stool cd</command>
            <arg><replaceable>target</replaceable></arg>
          </cmdsynopsis>
        </refsynopsisdiv>
        <refsect1><title>Description</title>
          <para>Changes the current working directory to the specified target:
            <itemizedlist>
              <listitem>
                (empty): the stage directory
              </listitem>
              <listitem>
                wrapper: the stage's wrapper directory.
              </listitem>
              <listitem>
                (otherwise): the specified direct or indirect sub-directory of the wrapper directory.
              </listitem>
            </itemizedlist>
          </para>
        </refsect1>
        <refsect1><title>Example</title>
          <para><command>stool cd logs</command> will jumps to shared/tomcat/logs inside your wrapper.</para>
        </refsect1>
      </refentry>
    </sect1>

    <sect1>
      <title>Config</title>

      <refentry>
        <refmeta>
          <refentrytitle>stool-config</refentrytitle>
          <manvolnum>1</manvolnum>
        </refmeta>
        <refnamediv>
          <refname>stool-config</refname>
          <refpurpose>manages stage properties</refpurpose>
        </refnamediv>

        <refsynopsisdiv>
          <cmdsynopsis>
            <command>stool config</command>
            <group rep="repeat">
              <arg><replaceable>key</replaceable></arg>
              <arg><replaceable>key</replaceable>=<replaceable>value</replaceable></arg>
            </group>
          </cmdsynopsis>
        </refsynopsisdiv>
        <refsect1><title>Description</title>
          <para>Gets or sets stage properties. A property is a key-value pair that configures the respective stage.</para>
          <para>When invoked without arguments, all properties are printed with documentation.</para>
          <para>When invoked with one or more keys, the respective properties are printed.</para>
          <para>When invoked with one or more assignments, the respective properties are changed.
          </para>
          <para>If you want to set a property to a value with spaces, you have to use quotes around the key-value pair.
            Otherwise, the shell does not see what belongs to your value.</para>
          <para>If you change a property, you have to invoke the necessary re-builds or re-starts to make the changes
            effective.</para>
          <para>Date properties have the form 'yyyy-mm-dd', so a valid value for until is - e.g. - 2013-12-31.</para>
          <para>Values in list properties (e.g. 'tomcat.select') are separated by commas.</para>
        </refsect1>
        <refsect1><title>Examples</title>
          <para><command>stool config tomcat.heap</command> prints the current value for the tomcat.heap property.</para>
          <para><command>stool config tomcat.heap=1000</command> sets the tomcat heap size to 1000 mb.</para>
          <para><command>stool config "build=mvn clean package"</command> sets a value with spaces</para>
          <para><command>stool config tomcat.select=foo,bar</command> configures a list property.
            Do not used spaces around the comma because the shell would consider this as a new key-value argument -- unless you
            also quote the arguments.
          </para>
        </refsect1>
      </refentry>
    </sect1>

    <sect1>
      <title>Rename</title>

      <refentry>
        <refmeta>
          <refentrytitle>stool-rename</refentrytitle>
          <manvolnum>1</manvolnum>
        </refmeta>
        <refnamediv>
          <refname>stool-rename</refname>
          <refpurpose>changes the stage name</refpurpose>
        </refnamediv>

        <refsynopsisdiv>
          <cmdsynopsis>
            <command>stool rename</command>
            <arg rep="plain"><replaceable>name</replaceable></arg>
          </cmdsynopsis>
        </refsynopsisdiv>
        <refsect1><title>Description</title>
          <para>Changes the stage name without touching anything else. If the stage is up, you have to restart it to reflect
            this change in your application url(s).
          </para>
        </refsect1>
      </refentry>
    </sect1>

    <sect1>
      <title>Move</title>

      <refentry>
        <refmeta>
          <refentrytitle>stool-move</refentrytitle>
          <manvolnum>1</manvolnum>
        </refmeta>
        <refnamediv>
          <refname>stool-move</refname>
          <refpurpose>moves the stage directory</refpurpose>
        </refnamediv>

        <refsynopsisdiv>
          <cmdsynopsis>
            <command>stool move</command>
            <arg rep="plain"><replaceable>dest</replaceable></arg>
          </cmdsynopsis>
        </refsynopsisdiv>
        <refsect1><title>Description</title>
          <para>Moves the stage directory without touching the stage name. If <command>dest</command> exists, it is moved into it.
            Otherwise it is moved into the parent of dest with the specified name. This is the same behavior as the unix 'mv' command,
            but it also adjusts Stool's wrapper directory.
          </para>
          <para>You might have to re-build your application after moving the stage if you have development tools that store
            absolute paths (e.g. Lavender ...).</para>
        </refsect1>
      </refentry>
    </sect1>
    <sect1>
      <title>List</title>

      <refentry>
        <refmeta>
          <refentrytitle>stool-list</refentrytitle>
          <manvolnum>1</manvolnum>
        </refmeta>
        <refnamediv>
          <refname>stool-list</refname>
          <refpurpose>lists stages</refpurpose>
        </refnamediv>

        <refsynopsisdiv>
          <cmdsynopsis>
            <command>stool move</command>
            <arg rep="plain"><replaceable>dest</replaceable></arg>
          </cmdsynopsis>
        </refsynopsisdiv>
        <refsect1><title>Description</title>
          <para>Prints a short status of the selected stages; default selection is <option>-all</option></para>
        </refsect1>
      </refentry>
    </sect1>
    <sect1>
      <title>Cleanup</title>

      <refentry>
        <refmeta>
          <refentrytitle>stool-cleanup</refentrytitle>
          <manvolnum>1</manvolnum>
        </refmeta>
        <refnamediv>
          <refname>stool-cleanup</refname>
          <refpurpose>cleanup a stage</refpurpose>
        </refnamediv>

        <refsynopsisdiv>
          <cmdsynopsis>
            <command>stool move</command>
            <arg rep="plain"><replaceable>dest</replaceable></arg>
          </cmdsynopsis>
        </refsynopsisdiv>
        <refsect1><title>Description</title>
          <para>Removes the Maven repository and rotages *.log info an archive.</para>
        </refsect1>
      </refentry>
    </sect1>
    <sect1>
      <title>Status</title>

      <refentry>
        <refmeta>
          <refentrytitle>stool-status</refentrytitle>
          <manvolnum>1</manvolnum>
        </refmeta>
        <refnamediv>
          <refname>stool-status</refname>
          <refpurpose>prints stage status</refpurpose>
        </refnamediv>

        <refsynopsisdiv>
          <cmdsynopsis>
            <command>stool status</command>
            <arg rep="plain"><replaceable>field</replaceable></arg>
          </cmdsynopsis>
        </refsynopsisdiv>
        <refsect1><title>Description</title>
          <para>Prints status fields of the stage. Default: all fields.</para>
        </refsect1>
      </refentry>
    </sect1>
    <sect1>
      <title>Validate</title>

      <refentry>
        <refmeta>
          <refentrytitle>stool-validate</refentrytitle>
          <manvolnum>1</manvolnum>
        </refmeta>
        <refnamediv>
          <refname>stool-validate</refname>
          <refpurpose>validates the stage</refpurpose>
        </refnamediv>

        <refsynopsisdiv>
          <cmdsynopsis>
            <command>stool validate</command>
            <arg>-stop</arg>
            <arg>-email</arg>
          </cmdsynopsis>
        </refsynopsisdiv>
        <refsect1><title>Description</title>
          <para>Checks if the until date of the stage has expired. If so, and <option>-stop</option> is specified, the stage is stopped.
            And if <option>-email</option> is specified, a notification mail is sent to the stage owner.</para>
        </refsect1>
      </refentry>
    </sect1>
  </chapter>

  <chapter>
    <title>Setup</title>

    <sect1>
      <title>Install</title>

      <para>To install Stool on your system:</para>
      <itemizedlist>
        <listitem>
          <para>Download Stool's setup script from https://github.com/mlhartme/stool/releases and store it -e.g. - as '/YOUR/DOWNLOADS/setup-stool'.</para>
        </listitem>
        <listitem>
          <para>Make the download executable: 'chmod a+x /YOUR/DOWNLOADS/setup-stool'.</para>
        </listitem>
        <listitem>
          <para>Make sure to have Java 8 installed on your system and 'java' is in your path. 'java' is used by the setup script and it becomes
            the default java version for new stages. (If you want a different java version for new stages, define it under "defaults" in Stool's
            configuration file - see below). </para>
        </listitem>
        <listitem>
          <para>Actually install Stool: run '/YOUR/DOWNLOADS/setup-stool /PATH/TO/STOOL/HOME'. This will create Stool's home directory at the
          specified location. </para>
        </listitem>
        <listitem>
          <para>Adjust Stool properties in '$STOOL_HOME/config.json' to your needs. If you enabled "shared" mode, you also need the
          following sudo rules:<programlisting>
%users ALL = (%users) NOPASSWD: /PATH/TO/STOOL/HOME/bin/stool-raw.sh
%users ALL = (%users) NOPASSWD:SETENV: /PATH/TO/STOOL/HOME/bin/service-wrapper.sh
%users ALL = (root) NOPASSWD: /PATH/TO/STOOL/HOME/bin/chowntree.sh
            </programlisting>
          </para>
        </listitem>
        <listitem>
          <para>Add the line 'source /PATH/TO/STOOL/HOME/bin/stool-function' to your $HOME/.bashrc file. This defines the shell
            function 'stool' that actually invokes Stool.
          </para>
        </listitem>
        <listitem>
          <para>Open a new shell window to make sure that your modified bashrc is loaded.</para>
        </listitem>
        <listitem>
          <para>Invoke 'stool' to verify your setup. You should get a usage message.</para>
        </listitem>
        <listitem>
          <para>setup-stool is no longer needed, you can remove it</para>
        </listitem>
      </itemizedlist>

      <para>Implementation note: 'stool' is a shell function, so 'which stool' cannot find it (you can see if with
        'declare'). 'stool' is not a binary because it has to adjust your environment variables (e.g. to set MAVEN_OPTS
        depending on you current stage) - this is possible in a shell function, but not in a binary.
      </para>
      <para>There's no uninstall command. To uninstall Stool:</para>
      <itemizedlist>
        <listitem>
          <para>Run 'stool system-stop'</para>
          <para>Remove the $STOOL_HOME directory.</para>
          <para>Remove the initialization code from your shell files.</para>
        </listitem>
      </itemizedlist>

    </sect1>

    <sect1>
      <title>Upgrade</title>

      <para>If you run a new 'stool-setup' on an existing $STOOL_HOME it perform an incremental or full upgrade.
        An incremental upgrade just updates 'stool.jar', it is used if only the micro version number has changed.
        A full upgrade is performed if the minor or major version of Stool has changed. In this case, a new $STOOL_HOME
        directory is created and the configuration and all stages from the old home directory is imported
        (shows a diff before changing anything). You can remove the old home directory after a full upgrade when you
        no longer need the old directory (e.g. for log files).
      </para>

      <para>Here's the best practice to roll-out a new version (unless it's only an incremental upgrade) on a machine:
        <itemizedlist>
          <listitem>Run 'validate -all' and fix possible problems</listitem>
          <listitem>Make sure there are no other shells open when you run setup-stool. This is crucial because existing
            shells (in particular those of other users!) continue to access the old stool version, and this will usually
            cause problems with the upgraded home directory.
          </listitem>
          <listitem>'stool system-stop'</listitem>
          <listitem>Run 'setup-stool' and adjust you shell initialization code.
          </listitem>
          <listitem>Login with a new shell to get the updated Stool version and run the following commands
            - but keep the original shell open until the commands succeeded:
          </listitem>
          <listitem>'stool validate -all'</listitem>
          <listitem>'stool system-start'</listitem>
        </itemizedlist>
      </para>
    </sect1>

  </chapter>


  <chapter>
    <title>Directory Layout</title>
    <para>
      ... of a source stage

      <programlisting>
      (stage directory) (normal application files)
      (stool home)
        |- config.json (Stool configuration)
        |- run
        |   |- stool.lock
        |   |- sleep.json
        |   '- users
        |       |- (one file per user session)
        |       :
        |- downloads (caches Tomcat- and Service Wrapper downloads)
        |- bin
        |   |- stool-function
        |   |- service-wrapper.sh
        |   |- stool.jar
        |   |- stool-(timestamp).jar  (optional incremental updates)
        |   |- stool-catalina.sh
        |   '- stool-chown.sh
        |- inbox (to push jars into artifact stages with an inbox urls)
        |- extensions (for jars with Stool extensions)
        |- logs
        |   |- stool.log
        |   |- (archived stool logs)
        |- overview (stage directory of the overview stage)
        |- service-wrapper
        |   |- wrapper-linux-x86-64-3.5.26 (installed service wrapper)
        |   :
        |- tomcat
        |   |- apache-tomcat-7.0.59 (installed Tomcat)
        |   :
        '- wrappers
            '- (stage name)
                |- config.json (stage properties and some status fields)
                |- anchor (symlink to stage directory)
                |- ports (ports allocated for this stage -- created when stage is first started)
                '- shared
                   |- buildstats.json
                   |- ssl (generated certs, if any)
                   |- run (pid stuff for service wrapper)
                   |- conf
                   |   '- service-wrapper.conf
                   '- tomcat (tomcat for this stage)
                       |- conf (standard tomcat directory with generated server.xml)
                       |- temp (standart tomcat)
                       |- work (standard tomcat)
                       '- logs
                           '- applogs (application log files for pustefix apps)
      </programlisting>
    </para>
  </chapter>
</book>
